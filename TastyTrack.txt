"Tasty finds, effortless tracking!"

Prompt for Frontend UI (React + Vite + TailwindCSS)
"Design a modern, user-friendly UI for a restaurant recommendation website called TastyTrack. The website helps users find the best restaurants nearby in Chennai based on reviews and ratings.

UI Features:
✅ Homepage:

A hero section with a search bar where users can enter their location (e.g., ‘T. Nagar, Chennai’).
A visually appealing static Chennai map with restaurant markers.
✅ Restaurant List:

A grid or list view displaying top restaurants with:
Name
Cuisine Type (South Indian, Chinese, etc.)
Ratings & Reviews
Address
A filter system to sort by:
Highest Rating
Most Reviewed
Cuisine Type
✅ Restaurant Details Page:

Detailed restaurant info page with:
Restaurant image
Description
Reviews & Ratings Section
User-generated feedback submission form
✅ Color Theme & Styling:

A vibrant and modern theme using shades of pink, violet, and white.
Clean UI with soft rounded edges, smooth animations, and a mobile-responsive layout.
✅ Tech Stack:

ReactJS (ViteJS) + TailwindCSS
Static Google Map Image for Chennai
Local JSON data for restaurants (for now)


Prompt:

Design a modern and visually appealing restaurant recommendation website called TastyTrack using ReactJS (ViteJS) + Tailwind CSS. The website should have a sleek and intuitive UI with a vibrant color scheme (preferably pink or violet-themed).

Main Features:
Homepage

A search bar allowing users to find nearby restaurants based on location.
Display top-rated restaurants dynamically based on reviews, ratings, and popularity.
A hero section with an engaging tagline: "Tasty finds, effortless tracking!"
An interactive Google Maps API integration showing restaurant locations.
Restaurant Listings Page

A filter & sort option for users to choose restaurants based on cuisine, pricing, ratings, and distance.
A visually engaging card-based layout displaying restaurant names, ratings, images, and user reviews.
Restaurant Details Page

A dedicated page for each restaurant showing:
Reviews & ratings aggregated from Swiggy, Zomato, and Google.
A user-friendly review submission section allowing users to add feedback.
Sentiment-based highlighted reviews (e.g., “Most Loved Dish”, “Best for Families”).
Location embedded on Google Maps.
User Dashboard (for logged-in users)

Personalized recommendations based on past reviews and preferences.
A list of previously reviewed restaurants and saved favorites.
Login/Signup Page

Allow authentication with Google, email/password.
A seamless signup/login flow with a beautiful and minimalist design.
Design Preferences:
Use Tailwind CSS for styling, ensuring a responsive and mobile-friendly layout.
Implement smooth animations (Framer Motion recommended) for a dynamic UI experience.
Keep a clean and clutter-free UI, emphasizing usability and speed.



Abstract:
TastyTrack is a smart restaurant recommendation system designed to help users discover the best nearby restaurants in Chennai based on ratings, reviews, and user feedback. Using a static map of Chennai, the platform allows users to search for restaurants, view top-rated suggestions, and explore detailed insights, including cuisine types, customer reviews, and addresses. The system aggregates restaurant data from online sources and provides a seamless, user-friendly interface to enhance the dining experience. Users can also submit their own reviews, contributing to a community-driven recommendation system.

Tech Stack Used:
✅ Frontend: ReactJS (ViteJS), TailwindCSS, TypeScript
✅ Backend: Node.js, Express.js
✅ Database: MongoDB
✅ APIs & Features: Static Google Map for Chennai, Manual Data Aggregation, User Review System
✅ Deployment: Vercel (Frontend), Render (Backend)













Smart Restaurant Recommendation System – Project Documentation
Project Overview
The Smart Restaurant Recommendation System is a full-stack web application designed to help users discover, review, and manage their favorite restaurants. The backend is built with Node.js, Express, and MongoDB, providing a robust RESTful API for user authentication, restaurant management, reviews, and personalized recommendations.

Project Idea
The core idea is to create a platform where:

Users can register, log in, search for restaurants, leave reviews, and manage their favorite restaurants.
Admins can add new restaurants and manage the restaurant database.
Everyone can view restaurant details, ratings, and reviews, and get recommendations based on cuisine or search queries.
This system aims to enhance the dining experience by leveraging user feedback and data-driven recommendations.


Detailed Explanation of Each Part
1. Entry Point: server.js
Purpose: Initializes the Express app, connects to MongoDB, sets up middleware, and mounts all routes.
Key Features:
Loads environment variables.
Configures CORS for security.
Applies rate limiting to prevent abuse.
Serves Swagger API documentation.
Handles errors globally.
Connects to MongoDB and starts the server.


2. Models
a. User.js
Purpose: Defines the user schema.
Fields:
name, email, password (hashed), favorites (array of Restaurant IDs), role (user/admin).
Features:
Passwords are hashed using bcrypt.
Includes a method for password comparison.

b. Restaurant.js
Purpose: Defines the restaurant schema.
Fields:
name, cuisine, rating, reviewCount, address, image, description, reviews (array of Review IDs).


c. Review.js
Purpose: Defines the review schema.
Fields:
restaurant (Restaurant ID), user (User ID), rating, comment, createdAt.


3. Controllers
a. authController.js
Handles: User registration, login, and token refresh.
Features:
Validates input.
Hashes passwords.
Issues JWT tokens for authentication.

b. restaurantController.js
Handles: Restaurant CRUD operations and search.
Features:
Pagination for listing restaurants.
Search by name or cuisine.
Only admins can create restaurants.

c. reviewController.js
Handles: Creating and managing reviews.
Features:
Prevents duplicate reviews by the same user for a restaurant.
Updates restaurant's average rating and review count after each review.
d. userController.js
Handles: User profile and favorites management.
Features:
Add/remove favorite restaurants.
Get user profile with favorite restaurants.


4. Routes
Purpose: Define API endpoints and connect them to controllers.
Files:
authRoutes.js: /api/auth (register, login, refresh)
restaurantRoutes.js: /api/restaurants (CRUD, search)
reviewRoutes.js: /api/reviews (add review)
userRoutes.js: /api/users (profile, favorites)

5. Middleware
a. authMiddleware.js
Purpose: Protects routes by verifying JWT tokens and user roles.
b. errorMiddleware.js
Purpose: Catches and formats errors for consistent API responses.
c. validate.js
Purpose: Handles validation errors from express-validator.


6. Utilities
a. jwt.js
Purpose: Utility functions for generating and verifying JWT tokens.


How the System Works
User Registration & Login

Users register with name, email, and password.
Passwords are securely hashed.
On login, users receive a JWT token for authentication.
Restaurant Management

Admins can add new restaurants.
All users can view and search restaurants.
Reviews

Authenticated users can review restaurants (one review per restaurant).
Restaurant ratings and review counts update automatically.
Favorites

Users can add or remove restaurants from their favorites.
Favorites are shown in the user profile.

Security & Performance

JWT-based authentication.
Role-based access control.
Rate limiting and CORS for security.
Input validation and error handling for reliability.